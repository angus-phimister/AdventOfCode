}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
# Sides
sideTop = (i == 1 )
sideLeft = (j == 1)
sideRight = ( j == bound[2])
sideBottom  =(i == bound[1] )
if (sideTop) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (sideLeft) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideRight) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideBottom) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1])
next
}
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1]) &  (matrix[i,j] < matrix[i,j-1])
}
}
return(minpos)
}
findMinumum(dataMat)
matrix = dataMat
bound <- dim(matrix)
minpos <- matrix(rep(FALSE,bound[1]*bound[2]), ncol = bound[1])
for (i in 1:bound[1]) {
for (j in 1:bound[2]) {
# Corners
cornerUL = (i == 1 & j == 1)
cornerUR = (i == 1 & j == bound[2])
cornerLL = (i = bound[1] & j == 1)
cornerLR  =(i == bound[1] & j == bound[2])
if (cornerUL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j])
next
}
if (cornerUR) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
# Sides
sideTop = (i == 1 )
sideLeft = (j == 1)
sideRight = ( j == bound[2])
sideBottom  =(i == bound[1] )
if (sideTop) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (sideLeft) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideRight) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideBottom) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1])
next
}
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1]) &  (matrix[i,j] < matrix[i,j-1])
}
}
i
j
cornerUL = (i == 1 & j == 1)
minpos
View(minpos)
View(minpos)
# Day 8 - Part 2
# Mininimzing
rm(list = ls())
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day9')
library(tidyverse)
data <- read_tsv(file = "input.txt", col_names = FALSE) %>%
seperate(col = X1, into)
data <- scan(file = "input.txt", what = character()) %>%
strsplit(split = "") %>%
unlist()
dataMat<- matrix(as.double(data), ncol = 100, byrow=  TRUE )
# Minimum if lower than all the things around it
findMinumum <- function(matrix) {
# Find Boundaries
bound <- dim(matrix)
minpos <- matrix(rep(FALSE,bound[1]*bound[2]), ncol = bound[1])
for (i in 1:bound[1]) {
for (j in 1:bound[2]) {
# Corners
cornerUL = (i == 1 & j == 1)
cornerUR = (i == 1 & j == bound[2])
cornerLL = (i == bound[1] & j == 1)
cornerLR  =(i == bound[1] & j == bound[2])
if (cornerUL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j])
next
}
if (cornerUR) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
# Sides
sideTop = (i == 1 )
sideLeft = (j == 1)
sideRight = ( j == bound[2])
sideBottom  =(i == bound[1] )
if (sideTop) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (sideLeft) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideRight) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideBottom) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1])
next
}
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1]) &  (matrix[i,j] < matrix[i,j-1])
}
}
return(minpos)
}
findMinumum(dataMat)
matrix = dataMat
bound <- dim(matrix)
minpos <- matrix(rep(FALSE,bound[1]*bound[2]), ncol = bound[1])
for (i in 1:bound[1]) {
for (j in 1:bound[2]) {
# Corners
cornerUL = (i == 1 & j == 1)
cornerUR = (i == 1 & j == bound[2])
cornerLL = (i == bound[1] & j == 1)
cornerLR  =(i == bound[1] & j == bound[2])
if (cornerUL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j])
next
}
if (cornerUR) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
}
}
i
j
(matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j])
(matrix[i,j] < matrix[i,j+1])
(matrix[i,j] < matrix[i-1,j])
matrix[i-1,j]
minpos[i,j] = (matrix[i,j] < matrix[i,j+1])  & (matrix[i,j] < matrix[i+1,j])
# Find Boundaries
bound <- dim(matrix)
minpos <- matrix(rep(FALSE,bound[1]*bound[2]), ncol = bound[1])
for (i in 1:bound[1]) {
for (j in 1:bound[2]) {
# Corners
cornerUL = (i == 1 & j == 1)
cornerUR = (i == 1 & j == bound[2])
cornerLL = (i == bound[1] & j == 1)
cornerLR  =(i == bound[1] & j == bound[2])
if (cornerUL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1])  & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerUR) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
}
}
minpos
i
j
matrix[i-1,j]
minpos[i,j] = (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j-1])
minpos[i,j]
# Find Boundaries
bound <- dim(matrix)
minpos <- matrix(rep(FALSE,bound[1]*bound[2]), ncol = bound[1])
for (i in 1:bound[1]) {
for (j in 1:bound[2]) {
# Corners
cornerUL = (i == 1 & j == 1)
cornerUR = (i == 1 & j == bound[2])
cornerLL = (i == bound[1] & j == 1)
cornerLR  =(i == bound[1] & j == bound[2])
if (cornerUL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1])  & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerUR) {
minpos[i,j] = (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
}
}
i
j
cornerLL
# Find Boundaries
bound <- dim(matrix)
minpos <- matrix(rep(FALSE,bound[1]*bound[2]), ncol = bound[1])
for (i in 1:bound[1]) {
for (j in 1:bound[2]) {
# Corners
cornerUL = (i == 1 & j == 1)
cornerUR = (i == 1 & j == bound[2])
cornerLL = (i == bound[1] & j == 1)
cornerLR  =(i == bound[1] & j == bound[2])
if (cornerUL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1])  & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerUR) {
minpos[i,j] = (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
}
}
minpos
# Find Boundaries
bound <- dim(matrix)
minpos <- matrix(rep(FALSE,bound[1]*bound[2]), ncol = bound[1])
for (i in 1:bound[1]) {
for (j in 1:bound[2]) {
# Corners
cornerUL = (i == 1 & j == 1)
cornerUR = (i == 1 & j == bound[2])
cornerLL = (i == bound[1] & j == 1)
cornerLR  =(i == bound[1] & j == bound[2])
if (cornerUL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1])  & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerUR) {
minpos[i,j] = (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
# Sides
sideTop = (i == 1 )
sideLeft = (j == 1)
sideRight = ( j == bound[2])
sideBottom  =(i == bound[1] )
if (sideTop) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (sideLeft) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideRight) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideBottom) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1])
next
}
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1]) &  (matrix[i,j] < matrix[i,j-1])
}
}
i
j
# Find Boundaries
bound <- dim(matrix)
minpos <- matrix(rep(FALSE,bound[1]*bound[2]), ncol = bound[1])
for (i in 1:bound[1]) {
for (j in 1:bound[2]) {
# Corners
cornerUL = (i == 1 & j == 1)
cornerUR = (i == 1 & j == bound[2])
cornerLL = (i == bound[1] & j == 1)
cornerLR  =(i == bound[1] & j == bound[2])
if (cornerUL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1])  & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerUR) {
minpos[i,j] = (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
# Sides
sideTop = (i == 1 )
sideLeft = (j == 1)
sideRight = ( j == bound[2])
sideBottom  =(i == bound[1] )
if (sideTop) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (sideLeft) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideRight) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideBottom) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1])
next
}
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1]) &  (matrix[i,j] < matrix[i,j-1])
}
}
i
j
# Find Boundaries
bound <- dim(matrix)
minpos <- matrix(rep(FALSE,bound[1]*bound[2]), ncol = bound[1])
for (i in 1:bound[1]) {
for (j in 1:bound[2]) {
# Corners
cornerUL = (i == 1 & j == 1)
cornerUR = (i == 1 & j == bound[2])
cornerLL = (i == bound[1] & j == 1)
cornerLR  =(i == bound[1] & j == bound[2])
if (cornerUL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1])  & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerUR) {
minpos[i,j] = (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
# Sides
sideTop = (i == 1 )
sideLeft = (j == 1)
sideRight = ( j == bound[2])
sideBottom  =(i == bound[1] )
if (sideTop) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (sideLeft) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideRight) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideBottom) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i,j+1])
next
}
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1]) &  (matrix[i,j] < matrix[i,j-1])
}
}
# Day 8 - Part 2
# Mininimzing
rm(list = ls())
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day9')
library(tidyverse)
data <- read_tsv(file = "input.txt", col_names = FALSE) %>%
seperate(col = X1, into)
data <- scan(file = "input.txt", what = character()) %>%
strsplit(split = "") %>%
unlist()
dataMat<- matrix(as.double(data), ncol = 100, byrow=  TRUE )
# Minimum if lower than all the things around it
findMinumum <- function(matrix) {
# Find Boundaries
bound <- dim(matrix)
minpos <- matrix(rep(FALSE,bound[1]*bound[2]), ncol = bound[1])
for (i in 1:bound[1]) {
for (j in 1:bound[2]) {
# Corners
cornerUL = (i == 1 & j == 1)
cornerUR = (i == 1 & j == bound[2])
cornerLL = (i == bound[1] & j == 1)
cornerLR  =(i == bound[1] & j == bound[2])
if (cornerUL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1])  & (matrix[i,j] < matrix[i+1,j])
next
}
if (cornerUR) {
minpos[i,j] = (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (cornerLL) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j])
next
}
if (cornerLR) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j])
next
}
# Sides
sideTop = (i == 1 )
sideLeft = (j == 1)
sideRight = ( j == bound[2])
sideBottom  =(i == bound[1] )
if (sideTop) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j-1])
next
}
if (sideLeft) {
minpos[i,j] = (matrix[i,j] < matrix[i,j+1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideRight) {
minpos[i,j] = (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j])
next
}
if (sideBottom) {
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i,j-1]) & (matrix[i,j] < matrix[i,j+1])
next
}
minpos[i,j] = (matrix[i,j] < matrix[i-1,j]) & (matrix[i,j] < matrix[i+1,j]) & (matrix[i,j] < matrix[i,j+1]) &  (matrix[i,j] < matrix[i,j-1])
}
}
return(minpos)
}
findMinumum(dataMat)
mins <- findMinumum(dataMat)
whereMin <- datamat[mins]
dataMat
whereMin <- dataMat[mins]
whereMin <- sum(dataMat[mins])
