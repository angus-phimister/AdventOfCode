?measurementInvariance
all.results<-matrix(NA, ncol = 6, nrow=3)
#model <-  'int =~ emot_lowmood + emot_worry + emot_fear + peer_solitary + peer_peerprob
#                ext =~ bhvr_aggr + bhvr_dsbdn + bhvr_temper +hype_restless + hype_concen'
#varlist <- c("emot_lowmood", "emot_worry", "emot_fear", "peer_solitary" , "peer_peerprob" ,
#             "bhvr_aggr", "bhvr_dsbdn", "bhvr_temper", "hype_restless" , "hype_concen")
model <-  'int =~ 1*emot_lowmood + emot_worry + emot_fear + peer_solitary + peer_peerprob'
varlist <- c("emot_lowmood", "emot_worry", "emot_fear","peer_solitary" , "peer_peerprob")
print(model)
# --------------------------------------------------------------------------------------------------------------- ##
##------------------------------------- Configural Model  ##-------------------------------------
# --------------------------------------------------------------------------------------------------------------- ##
baseline <- measEq.syntax(configural.model = model,
data = d,
ordered =  varlist ,
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = "configural")
model.baseline <- as.character(baseline)
cat(as.character(baseline))
#fit baseline model
fit.baseline <- cfa(model.baseline, data = d, group = "cohort", ordered = varlist )
summary(fit.baseline, fit.measures = TRUE)
all.results[1,]<-round(data.matrix(fitmeasures(fit.baseline,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
# --------------------------------------------------------------------------------------------------------------- ##
##------------------------------------- Scalar  Model  ------------------------------------- ##
# --------------------------------------------------------------------------------------------------------------- ##
prop4 <- measEq.syntax(configural.model = mod.cat,
data = dat,
ordered = c("R09A", "R09B", "R09C", "R09D"),
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "IDCNTRY",
group.equal = c("thresholds"))
#store model fit information for proposition 4
all.results[2,]<-round(data.matrix(fitmeasures(fit.prop4,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
scalar <- measEq.syntax(configural.model = model,
data = d,
parameterization = "delta",
ordered = varlist,
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = c("thresholds"))
model.scalar <- as.character(scalar)
fit.scalar <- cfa(model.scalar, data = d, group = "cohort", ordered = varlist )
summary(fit.scalar , fit.measures = TRUE)
#store model fit information for proposition 4
all.results[2,]<-round(data.matrix(fitmeasures(fit.scalar,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
lavTestLRT(fit.baseline,fit.scalar)
scalar <- measEq.syntax(configural.model = model,
data = d,
parameterization = "delta",
ordered = varlist,
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = c("thresholds"))
model.scalar <- as.character(scalar)
fit.scalar <- cfa(model.scalar, data = d, group = "cohort", ordered = varlist )
summary(fit.scalar , fit.measures = TRUE)
#store model fit information for proposition 4
all.results[2,]<-round(data.matrix(fitmeasures(fit.scalar,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
lavTestLRT(fit.baseline,fit.scalar)
##------------------------------------- Scalar  Model  ------------------------------------- ##
# --------------------------------------------------------------------------------------------------------------- ##
scalar <- measEq.syntax(configural.model = model,
data = d,
parameterization = "delta",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = c("thresholds"))
model.scalar <- as.character(scalar)
fit.scalar <- cfa(model.scalar, data = d, group = "cohort" )
summary(fit.scalar , fit.measures = TRUE)
#store model fit information for proposition 4
all.results[2,]<-round(data.matrix(fitmeasures(fit.scalar,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
lavTestLRT(fit.baseline,fit.scalar)
# Cross Cohort Comparison
data<- read.csv(file="C:/Users/angus/Dropbox/Deaton - ECD/data/analysis/Age 5 Harmonized.csv",
header=TRUE, sep=",",  na.strings = "NA")
d <- transform(data, emot_lowmood = as.integer(levels(emot_lowmood))[emot_lowmood],
emot_worry = as.integer(levels(emot_worry))[emot_worry],
emot_fear = as.integer(levels(emot_fear))[emot_fear],
peer_peerprob = as.integer(levels(peer_peerprob))[peer_peerprob],
peer_solitary = as.integer(levels(peer_solitary))[peer_solitary],
bhvr_aggr = as.integer(levels(bhvr_aggr))[bhvr_aggr],
bhvr_dsbdn = as.integer(levels(bhvr_dsbdn))[bhvr_dsbdn],
bhvr_temper = as.integer(levels(bhvr_temper))[bhvr_temper],
hype_restless = as.integer(levels(hype_restless))[hype_restless],
hype_concen = as.integer(levels(hype_concen))[hype_concen]
)
d <- data.frame(na.omit(d))
#install.packages(c("lavaan",  "semTools", "semPlot"))
library(lavaan)
library(semTools)
csvpath <- "C:/Users/angus/Dropbox/Deaton - ECD/outputs/Tables/Harmonisation/"
?measurementInvariance
all.results<-matrix(NA, ncol = 6, nrow=3)
#model <-  'int =~ emot_lowmood + emot_worry + emot_fear + peer_solitary + peer_peerprob
#                ext =~ bhvr_aggr + bhvr_dsbdn + bhvr_temper +hype_restless + hype_concen'
#varlist <- c("emot_lowmood", "emot_worry", "emot_fear", "peer_solitary" , "peer_peerprob" ,
#             "bhvr_aggr", "bhvr_dsbdn", "bhvr_temper", "hype_restless" , "hype_concen")
model <-  'int =~ 1*emot_lowmood + emot_worry + emot_fear + peer_solitary + peer_peerprob'
varlist <- c("emot_lowmood", "emot_worry", "emot_fear","peer_solitary" , "peer_peerprob")
print(model)
# --------------------------------------------------------------------------------------------------------------- ##
##------------------------------------- Configural Model  ##-------------------------------------
# --------------------------------------------------------------------------------------------------------------- ##
baseline <- measEq.syntax(configural.model = model,
data = d,
ordered =  varlist ,
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = "configural")
model.baseline <- as.character(baseline)
cat(as.character(baseline))
#fit baseline model
fit.baseline <- cfa(model.baseline, data = d, group = "cohort", ordered = varlist )
summary(fit.baseline, fit.measures = TRUE)
all.results[1,]<-round(data.matrix(fitmeasures(fit.baseline,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
# --------------------------------------------------------------------------------------------------------------- ##
##------------------------------------- Scalar  Model  ------------------------------------- ##
# --------------------------------------------------------------------------------------------------------------- ##
scalar <- measEq.syntax(configural.model = model,
data = d,
parameterization = "delta",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = c("thresholds"))
model.scalar <- as.character(scalar)
fit.scalar <- cfa(model.scalar, data = d, group = "cohort" )
summary(fit.scalar , fit.measures = TRUE)
#store model fit information for proposition 4
all.results[2,]<-round(data.matrix(fitmeasures(fit.scalar,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
lavTestLRT(fit.baseline,fit.scalar)
# Cross Cohort Comparison
data<- read.csv(file="C:/Users/angus/Dropbox/Deaton - ECD/data/analysis/Age 5 Harmonized.csv",
header=TRUE, sep=",",  na.strings = "NA")
d <- transform(data, emot_lowmood = as.integer(levels(emot_lowmood))[emot_lowmood],
emot_worry = as.integer(levels(emot_worry))[emot_worry],
emot_fear = as.integer(levels(emot_fear))[emot_fear],
peer_peerprob = as.integer(levels(peer_peerprob))[peer_peerprob],
peer_solitary = as.integer(levels(peer_solitary))[peer_solitary],
bhvr_aggr = as.integer(levels(bhvr_aggr))[bhvr_aggr],
bhvr_dsbdn = as.integer(levels(bhvr_dsbdn))[bhvr_dsbdn],
bhvr_temper = as.integer(levels(bhvr_temper))[bhvr_temper],
hype_restless = as.integer(levels(hype_restless))[hype_restless],
hype_concen = as.integer(levels(hype_concen))[hype_concen]
)
d <- data.frame(na.omit(d))
#install.packages(c("lavaan",  "semTools", "semPlot"))
library(lavaan)
library(semTools)
csvpath <- "C:/Users/angus/Dropbox/Deaton - ECD/outputs/Tables/Harmonisation/"
?measurementInvariance
all.results<-matrix(NA, ncol = 6, nrow=3)
#model <-  'int =~ emot_lowmood + emot_worry + emot_fear + peer_solitary + peer_peerprob
#                ext =~ bhvr_aggr + bhvr_dsbdn + bhvr_temper +hype_restless + hype_concen'
#varlist <- c("emot_lowmood", "emot_worry", "emot_fear", "peer_solitary" , "peer_peerprob" ,
#             "bhvr_aggr", "bhvr_dsbdn", "bhvr_temper", "hype_restless" , "hype_concen")
model <-  'int =~ 1*emot_lowmood + emot_worry + emot_fear + peer_solitary + peer_peerprob'
varlist <- c("emot_lowmood", "emot_worry", "emot_fear","peer_solitary" , "peer_peerprob")
print(model)
# --------------------------------------------------------------------------------------------------------------- ##
##------------------------------------- Configural Model  ##-------------------------------------
# --------------------------------------------------------------------------------------------------------------- ##
baseline <- measEq.syntax(configural.model = model,
data = d,
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = "configural")
model.baseline <- as.character(baseline)
cat(as.character(baseline))
#fit baseline model
fit.baseline <- cfa(model.baseline, data = d, group = "cohort")
summary(fit.baseline, fit.measures = TRUE)
all.results[1,]<-round(data.matrix(fitmeasures(fit.baseline,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
# --------------------------------------------------------------------------------------------------------------- ##
##------------------------------------- Scalar  Model  ------------------------------------- ##
# --------------------------------------------------------------------------------------------------------------- ##
scalar <- measEq.syntax(configural.model = model,
data = d,
parameterization = "delta",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = c("thresholds"))
model.scalar <- as.character(scalar)
fit.scalar <- cfa(model.scalar, data = d, group = "cohort" )
summary(fit.scalar , fit.measures = TRUE)
#store model fit information for proposition 4
all.results[2,]<-round(data.matrix(fitmeasures(fit.scalar,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
lavTestLRT(fit.baseline,fit.scalar)
scalar <- measEq.syntax(configural.model = model,
data = d,
parameterization = "delta",
ordered = varlist,
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = c("thresholds"))
model.scalar <- as.character(scalar)
fit.scalar <- cfa(model.scalar, data = d, group = "cohort", ordered = varlist )
summary(fit.scalar , fit.measures = TRUE)
#store model fit information for proposition 4
all.results[2,]<-round(data.matrix(fitmeasures(fit.scalar,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
lavTestLRT(fit.baseline,fit.scalar)
# -------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------- ##
##------------------------------------- Configural Model  ##-------------------------------------
# --------------------------------------------------------------------------------------------------------------- ##
baseline <- measEq.syntax(configural.model = model,
data = d,
ordered =  varlist ,
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = "configural")
model.baseline <- as.character(baseline)
cat(as.character(baseline))
#fit baseline model
fit.baseline <- cfa(model.baseline, data = d, group = "cohort", ordered = varlist )
summary(fit.baseline, fit.measures = TRUE)
all.results[1,]<-round(data.matrix(fitmeasures(fit.baseline,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
lavTestLRT(fit.baseline,fit.scalar)
summary(metric, fit.measures = TRUE)
# Cross Cohort Comparison
data<- read.csv(file="C:/Users/angus/Dropbox/Deaton - ECD/data/analysis/Age 5 Harmonized.csv",
header=TRUE, sep=",",  na.strings = "NA")
d <- transform(data, emot_lowmood = as.integer(levels(emot_lowmood))[emot_lowmood],
emot_worry = as.integer(levels(emot_worry))[emot_worry],
emot_fear = as.integer(levels(emot_fear))[emot_fear],
peer_peerprob = as.integer(levels(peer_peerprob))[peer_peerprob],
peer_solitary = as.integer(levels(peer_solitary))[peer_solitary],
bhvr_aggr = as.integer(levels(bhvr_aggr))[bhvr_aggr],
bhvr_dsbdn = as.integer(levels(bhvr_dsbdn))[bhvr_dsbdn],
bhvr_temper = as.integer(levels(bhvr_temper))[bhvr_temper],
hype_restless = as.integer(levels(hype_restless))[hype_restless],
hype_concen = as.integer(levels(hype_concen))[hype_concen]
)
d <- data.frame(na.omit(d))
#install.packages(c("lavaan",  "semTools", "semPlot"))
library(lavaan)
library(semTools)
csvpath <- "C:/Users/angus/Dropbox/Deaton - ECD/outputs/Tables/Harmonisation/"
?measurementInvariance
all.results<-matrix(NA, ncol = 6, nrow=3)
#model <-  'int =~ emot_lowmood + emot_worry + emot_fear + peer_solitary + peer_peerprob
#                ext =~ bhvr_aggr + bhvr_dsbdn + bhvr_temper +hype_restless + hype_concen'
#varlist <- c("emot_lowmood", "emot_worry", "emot_fear", "peer_solitary" , "peer_peerprob" ,
#             "bhvr_aggr", "bhvr_dsbdn", "bhvr_temper", "hype_restless" , "hype_concen")
model <-  'int =~ 1*emot_lowmood + emot_worry + emot_fear + peer_solitary + peer_peerprob'
varlist <- c("emot_lowmood", "emot_worry", "emot_fear","peer_solitary" , "peer_peerprob")
print(model)
# --------------------------------------------------------------------------------------------------------------- ##
##------------------------------------- Configural Model  ##-------------------------------------
# --------------------------------------------------------------------------------------------------------------- ##
baseline <- measEq.syntax(configural.model = model,
data = d,
ordered =  varlist ,
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = "configural")
model.baseline <- as.character(baseline)
cat(as.character(baseline))
#fit baseline model
fit.baseline <- cfa(model.baseline, data = d, group = "cohort", ordered = varlist )
summary(fit.baseline, fit.measures = TRUE)
all.results[1,]<-round(data.matrix(fitmeasures(fit.baseline,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
# --------------------------------------------------------------------------------------------------------------- ##
##------------------------------------- Scalar  Model  ------------------------------------- ##
# --------------------------------------------------------------------------------------------------------------- ##
scalar <- measEq.syntax(configural.model = model,
data = d,
parameterization = "delta",
ordered = varlist,
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "cohort",
group.equal = c("thresholds"))
model.scalar <- as.character(scalar)
fit.scalar <- cfa(model.scalar, data = d, group = "cohort", ordered = varlist )
summary(fit.scalar , fit.measures = TRUE)
#store model fit information for proposition 4
all.results[2,]<-round(data.matrix(fitmeasures(fit.scalar,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
lavTestLRT(fit.baseline,fit.scalar)
# --------------------------------------------------------------------------------------------------------------- ##
##------------------------------------- Metric  Model  ------------------------------------- ##
# --------------------------------------------------------------------------------------------------------------- ##
## And now - final model - one of threshold and loading invariance
prop7 <- measEq.syntax(configural.model = mod.cat,
data = dat,
ordered = c("R09A", "R09B", "R09C", "R09D"),
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "IDCNTRY",
group.equal = c("thresholds", "loadings"))
model.prop7 <- as.character(prop7)
fit.prop7 <- cfa(model.prop7, data = dat, group = "IDCNTRY", ordered = c("R09A", "R09B", "R09C", "R09D"))
summary(fit.prop7)
metric <- measEq.syntax(configural.model = model,
data = d,
ordered = varlist,
parameterization = "theta",
ID.cat = "Wu.Estabrook.2016",
ID.fac = "std.lv",
group = "cohort",
group.equal = c("thresholds", "loadings"))
model.metric <- as.character(metric)
fit.metric <- cfa(model.metric, data = d, group = "cohort", ordered = varlist )
summary(fit.metric , fit.measures = TRUE)
#store model fit information for metric
all.results[3,]<-round(data.matrix(fitmeasures(fit.metric,fit.measures = c("chisq.scaled","df.scaled","pvalue.scaled", "rmsea.scaled", "cfi.scaled", "tli.scaled"))), digits=3)
lavTestLRT(fit.baseline,fit.metric)
cat(as.character(baseline))
cat(as.character(scalar))
levels(d)
levels(d$cohort)
levelsof(d$cohort)
summmary(d)
summarize(d)
View(dat)
?optim
library(installr)
updateR()
q()
>mutate_at
?mutate_at
??mutate_at
# Day 6
# Crabs!
rm(list = ls())
##
library(tidyverse)
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day7')
starting <- read_csv(file = "input.txt", col_names = FALSE) %>%
pivot_longer(cols = everything(), names_to = "fish") %>%
pull(value)
# Day 6
# Crabs!
rm(list = ls())
##
library(tidyverse)
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day7')
starting <- read_csv(file = "input.txt", col_names = FALSE) %>%
pivot_longer(cols = everything(), names_to = "fish")
summary(value)
summary(starting$value)
mn<-summary(starting$value)$mean
mn<-summary(starting$value)
mn[[1]]
mn[[2]]
mn[[4]]
mn<-summary(starting$value)[[4]] %>%
round()
data <- starting %>%
mutate(diff = abs(value-mn)) %>%
summuarize(tchange = sum(diff))
# Day 6
# Crabs!
rm(list = ls())
##
library(tidyverse)
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day7')
# Positions
starting <- read_csv(file = "input.txt", col_names = FALSE) %>%
pivot_longer(cols = everything(), names_to = "fish") %>%
select(value)
# Mean
mn<-summary(starting$value)[[4]] %>%
round()
fuelUse <- starting %>%
mutate(diff = abs(value-mn)) %>%
summarize(tchange = sum(diff))
fuelUse
mn<-summary(starting$value)[[4]] %>%
round()
summary(starting$value)[[4]]
fuelUse <- starting %>%
mutate(diff = abs(value-mn))
View(fuelUse)
lm(y ~ value, data = starting)
lm(value ~1, data = starting)
mean(diff)
mean(fuelUse$diff)
# Day 6
# Crabs!
rm(list = ls())
##
library(tidyverse)
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day7')
# Positions
starting <- read_csv(file = "input.txt", col_names = FALSE)
starting <- read_csv(file = "input.txt", col_names = FALSE) %>%
pivot_longer(cols = everything(), names_to = "fish") %>%
select(value)
hist(starting$value)
starting_vector <- starting %>%
pull(value)
starting_vector - 1
abs(starting_vector - 1)
sum(abs(starting_vector - 1))
# Day 6
# Crabs!
rm(list = ls())
##
library(tidyverse)
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day7')
# Positions
starting <- read_csv(file = "input.txt", col_names = FALSE) %>%
pivot_longer(cols = everything(), names_to = "fish") %>%
select(value)
# Mean
mn<-summary(starting$value)[[4]] %>%
round()
fuelUse <- starting %>%
mutate(diff = abs(value-mn))%>%
summarize(tchange = cumsum(diff))
fuelUse
## Brute forcing it
starting_vector <- starting %>%
pull(value)
min = min(starting_vector)
max = max(starting_vector)
distances <- rep(0,length(min:max))
for (i in min:max) {
distances[i] = sum(abs(starting_vector - i))
}
min(distances)
distances
summary(distances)
# Day 6
# Crabs!
rm(list = ls())
##
library(tidyverse)
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day7')
# Positions
starting <- read_csv(file = "input.txt", col_names = FALSE) %>%
pivot_longer(cols = everything(), names_to = "fish") %>%
select(value)
# Mean
mn<-summary(starting$value)[[4]] %>%
round()
fuelUse <- starting %>%
mutate(diff = abs(value-mn))%>%
summarize(tchange = cumsum(diff))
fuelUse
## Brute forcing it
starting_vector <- starting %>%
pull(value)
min = min(starting_vector)
max = max(starting_vector)
distances <- rep(0,length(min:max)-1)
for (i in min:max) {
distances[i] = sum(abs(starting_vector - i))
}
min(distances)
fuelUse <- starting %>%
mutate(diff = abs(value-mn))%>%
summarize(tchange = cumsum(diff))
fuelUse
fuelUse <- starting %>%
mutate(diff = abs(value-mn))%>%
summarize(tchange = sum(diff))
fuelUse
which.min(distances)
min+343
min
summary(starting$value)
mn<-summary(starting$value)[[3]] %>%
round()
fuelUse <- starting %>%
mutate(diff = abs(value-mn))%>%
summarize(tchange = sum(diff))
fuelUse
distance2 <- function(a, b) {
intdiff = abs(a - b)
if (intdiff == 0) {
return(0)
}
else {
distance=(intdiff*(intdiff +1))*0.5
return(distance)
}
}
distance2(1,1)
distance2(1,2)
distance2(1,3)
distance2(1,100)
# Part B
distance2 <- function(a, b) {
intdiff = abs(a - b)
distance=(intdiff*(intdiff +1))*0.5
return(distance)
}
distances2 <- rep(0,length(min:max)-1)
for (i in min:max) {
distances2[i] = sum(distance2(starting_vector,i))
}
min(distances2)
