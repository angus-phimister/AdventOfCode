# Eight
eight <-  input[which(stringi::stri_length(input) == 7)] %>%
strsplit(split="") %>%
unlist()
# Finding Other Digits
length5s <-  input[which(stringi::stri_length(input) == 5)] %>%  # 2, 3, 5
strsplit(split="")
length6s <-  input[which(stringi::stri_length(input) == 6)] %>%  # 0, 6, 9
strsplit(split="")
upperL = setdiff(four, one)
# 3 Contains all the digits in one
i = 0
notFoundThree = TRUE
while (notFoundThree) {
i = i + 1
if (sum(length5s[[i]] %in% one) == 2) {
three = length5s[[i]]
notFoundThree = FALSE
length5s = length5s[-i] # remove this from list for #efficiency
}
}
# 5 - contains the upper L , remaining element must be 2
notFoundFive = TRUE
i = 0
while (notFoundFive) {
i = i + 1
if (sum(length5s[[i]] %in% upperL) == 2) {
five = length5s[[i]]
notFoundFive = FALSE
}
}
two = length5s[[-i]]
# 5 + 7 = 9
nine = union(five,seven)
for (i in 1:3) {
if (sum(length6s[[i]] %in% nine) == 6) {
length6s =length6s[-i]
break
}
}
# !9 + 5  = 6
six = union(setdiff(letters,nine), five)
for (i in 1:2) {
if (sum(length6s[[i]] %in% six) == 6) {
zero =length6s[[-i]]
break
}
}
### Applying the Find number on the output vector
input_split = unlist(strsplit(input, split = ""))
ans = rep(0,4)
for (j in 1:4) {
# Solution by length
length = str_length(output[j])
if (length == 2 ) {
ans[j] = 1
}
else if (length == 4) {
ans[j] = 4
}
else if (length == 3) {
ans[j] = 7
}
else if (length == 7) {
ans[j] = 8
}
if (length == 5) {
# Check 2
if (sum(input_split %in% two) == 5) {
ans[j] = 2
}
# Check 3
if (sum(input_split %in% three) == 5) {
ans[j] = 3
}
# Must be 5
ans[j] = 5
}
if (length == 6) {
# Check 0
if (sum(input_split %in% zero) == 6) {
ans[j] = 0
}
# Check 6
if (sum(input_split %in% six) == 6) {
ans[j] =6
}
if (sum(input_split %in% nine) == 6) {
ans[j] =9
}
}
}
results <-  ans %>%
paste(collapse = '') %>%
as.double()
return(results)
}
results = rep(0,100)
for (i in 1:200) {
inputi <- unlist(c(signal[i,]))
outputi <- unlist(c(output[i,]))
results[i] = deCodeNumbers(inputi,outputi)
}
sum(results)
output
input_split
unlist(strsplit(inputi, split = ""))
input
inputi[1]
# Day 8 - Part 2
# Decoding
rm(list = ls())
##
library(tidyverse)
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day8')
x = c("x1", "x2","x3", "x4","x5", "x6","x7", "x8","x9", "x10","x11", "x12","x13", "x14", "x15")
raw <- read_delim(file = "input.txt", col_names = FALSE, delim = "|")
raw <- read_tsv(file = "input.txt", col_names = FALSE) %>%
separate(col = X1, into =x, sep = " ")
output <- select(raw, x12:x15)
signal <- select(raw, x1:x10)
# Part 2
letters <- c("a","b","c","d","e","f","g")
deCodeNumbers <- function(input, output) {
# UNIQUE NUMBERS
# One
one <-  input[which(stringi::stri_length(input) == 2)] %>%
strsplit(split="") %>%
unlist()
# Four
four <-  input[which(stringi::stri_length(input) == 4)]  %>%
strsplit(split="") %>%
unlist()
# Seven
seven <-  input[which(stringi::stri_length(input) == 3)] %>%
strsplit(split="") %>%
unlist()
# Eight
eight <-  input[which(stringi::stri_length(input) == 7)] %>%
strsplit(split="") %>%
unlist()
# Finding Other Digits
length5s <-  input[which(stringi::stri_length(input) == 5)] %>%  # 2, 3, 5
strsplit(split="")
length6s <-  input[which(stringi::stri_length(input) == 6)] %>%  # 0, 6, 9
strsplit(split="")
upperL = setdiff(four, one)
# 3 Contains all the digits in one
i = 0
notFoundThree = TRUE
while (notFoundThree) {
i = i + 1
if (sum(length5s[[i]] %in% one) == 2) {
three = length5s[[i]]
notFoundThree = FALSE
length5s = length5s[-i] # remove this from list for #efficiency
}
}
# 5 - contains the upper L , remaining element must be 2
notFoundFive = TRUE
i = 0
while (notFoundFive) {
i = i + 1
if (sum(length5s[[i]] %in% upperL) == 2) {
five = length5s[[i]]
notFoundFive = FALSE
}
}
two = length5s[[-i]]
# 5 + 7 = 9
nine = union(five,seven)
for (i in 1:3) {
if (sum(length6s[[i]] %in% nine) == 6) {
length6s =length6s[-i]
break
}
}
# !9 + 5  = 6
six = union(setdiff(letters,nine), five)
for (i in 1:2) {
if (sum(length6s[[i]] %in% six) == 6) {
zero =length6s[[-i]]
break
}
}
### Applying the Find number on the output vector
ans = rep(0,4)
for (j in 1:4) {
input_split = unlist(strsplit(input[j], split = ""))
# Solution by length
length = str_length(output[j])
if (length == 2 ) {
ans[j] = 1
}
else if (length == 4) {
ans[j] = 4
}
else if (length == 3) {
ans[j] = 7
}
else if (length == 7) {
ans[j] = 8
}
if (length == 5) {
# Check 2
if (sum(input_split %in% two) == 5) {
ans[j] = 2
}
# Check 3
if (sum(input_split %in% three) == 5) {
ans[j] = 3
}
# Must be 5
ans[j] = 5
}
if (length == 6) {
# Check 0
if (sum(input_split %in% zero) == 6) {
ans[j] = 0
}
# Check 6
if (sum(input_split %in% six) == 6) {
ans[j] =6
}
if (sum(input_split %in% nine) == 6) {
ans[j] =9
}
}
}
results <-  ans %>%
paste(collapse = '') %>%
as.double()
return(results)
}
results = rep(0,100)
for (i in 1:200) {
inputi <- unlist(c(signal[i,]))
outputi <- unlist(c(output[i,]))
results[i] = deCodeNumbers(inputi,outputi)
}
sum(results)
# Day 8 - Part 2
# Decoding
rm(list = ls())
##
library(tidyverse)
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day8')
x = c("x1", "x2","x3", "x4","x5", "x6","x7", "x8","x9", "x10","x11", "x12","x13", "x14", "x15")
raw <- read_delim(file = "input.txt", col_names = FALSE, delim = "|")
raw <- read_tsv(file = "input.txt", col_names = FALSE) %>%
separate(col = X1, into =x, sep = " ")
output <- select(raw, x12:x15)
signal <- select(raw, x1:x10)
# Part 2
letters <- c("a","b","c","d","e","f","g")
deCodeNumbers <- function(input, output) {
# UNIQUE NUMBERS
# One
one <-  input[which(stringi::stri_length(input) == 2)] %>%
strsplit(split="") %>%
unlist()
# Four
four <-  input[which(stringi::stri_length(input) == 4)]  %>%
strsplit(split="") %>%
unlist()
# Seven
seven <-  input[which(stringi::stri_length(input) == 3)] %>%
strsplit(split="") %>%
unlist()
# Eight
eight <-  input[which(stringi::stri_length(input) == 7)] %>%
strsplit(split="") %>%
unlist()
# Finding Other Digits
length5s <-  input[which(stringi::stri_length(input) == 5)] %>%  # 2, 3, 5
strsplit(split="")
length6s <-  input[which(stringi::stri_length(input) == 6)] %>%  # 0, 6, 9
strsplit(split="")
upperL = setdiff(four, one)
# 3 Contains all the digits in one
i = 0
notFoundThree = TRUE
while (notFoundThree) {
i = i + 1
if (sum(length5s[[i]] %in% one) == 2) {
three = length5s[[i]]
notFoundThree = FALSE
length5s = length5s[-i] # remove this from list for #efficiency
}
}
# 5 - contains the upper L , remaining element must be 2
notFoundFive = TRUE
i = 0
while (notFoundFive) {
i = i + 1
if (sum(length5s[[i]] %in% upperL) == 2) {
five = length5s[[i]]
notFoundFive = FALSE
}
}
two = length5s[[-i]]
# 5 + 7 = 9
nine = union(five,seven)
for (i in 1:3) {
if (sum(length6s[[i]] %in% nine) == 6) {
length6s =length6s[-i]
break
}
}
# !9 + 5  = 6
six = union(setdiff(letters,nine), five)
for (i in 1:2) {
if (sum(length6s[[i]] %in% six) == 6) {
zero =length6s[[-i]]
break
}
}
### Applying the Find number on the output vector
ans = rep(0,4)
for (j in 1:4) {
input_split = unlist(strsplit(output[j], split = ""))
# Solution by length
length = str_length(output[j])
if (length == 2 ) {
ans[j] = 1
}
else if (length == 4) {
ans[j] = 4
}
else if (length == 3) {
ans[j] = 7
}
else if (length == 7) {
ans[j] = 8
}
if (length == 5) {
# Check 2
if (sum(input_split %in% two) == 5) {
ans[j] = 2
}
# Check 3
if (sum(input_split %in% three) == 5) {
ans[j] = 3
}
# Must be 5
ans[j] = 5
}
if (length == 6) {
# Check 0
if (sum(input_split %in% zero) == 6) {
ans[j] = 0
}
# Check 6
if (sum(input_split %in% six) == 6) {
ans[j] =6
}
if (sum(input_split %in% nine) == 6) {
ans[j] =9
}
}
}
results <-  ans %>%
paste(collapse = '') %>%
as.double()
return(results)
}
results = rep(0,100)
for (i in 1:200) {
inputi <- unlist(c(signal[i,]))
outputi <- unlist(c(output[i,]))
results[i] = deCodeNumbers(inputi,outputi)
}
sum(results)
inputi <- unlist(c(signal[i,]))
outputi <- unlist(c(output[i,]))
outputi
deCodeNumbers(inputi,outputi)
i
# Day 8 - Part 2
# Decoding
rm(list = ls())
##
library(tidyverse)
setwd('C:/Users/angus/Documents/GitHub/AdventOfCode2021/Day8')
x = c("x1", "x2","x3", "x4","x5", "x6","x7", "x8","x9", "x10","x11", "x12","x13", "x14", "x15")
raw <- read_delim(file = "input.txt", col_names = FALSE, delim = "|")
raw <- read_tsv(file = "input.txt", col_names = FALSE) %>%
separate(col = X1, into =x, sep = " ")
output <- select(raw, x12:x15)
signal <- select(raw, x1:x10)
# Part 2
letters <- c("a","b","c","d","e","f","g")
deCodeNumbers <- function(input, output) {
# UNIQUE NUMBERS
# One
one <-  input[which(stringi::stri_length(input) == 2)] %>%
strsplit(split="") %>%
unlist()
# Four
four <-  input[which(stringi::stri_length(input) == 4)]  %>%
strsplit(split="") %>%
unlist()
# Seven
seven <-  input[which(stringi::stri_length(input) == 3)] %>%
strsplit(split="") %>%
unlist()
# Eight
eight <-  input[which(stringi::stri_length(input) == 7)] %>%
strsplit(split="") %>%
unlist()
# Finding Other Digits
length5s <-  input[which(stringi::stri_length(input) == 5)] %>%  # 2, 3, 5
strsplit(split="")
length6s <-  input[which(stringi::stri_length(input) == 6)] %>%  # 0, 6, 9
strsplit(split="")
upperL = setdiff(four, one)
# 3 Contains all the digits in one
i = 0
notFoundThree = TRUE
while (notFoundThree) {
i = i + 1
if (sum(length5s[[i]] %in% one) == 2) {
three = length5s[[i]]
notFoundThree = FALSE
length5s = length5s[-i] # remove this from list for #efficiency
}
}
# 5 - contains the upper L , remaining element must be 2
notFoundFive = TRUE
i = 0
while (notFoundFive) {
i = i + 1
if (sum(length5s[[i]] %in% upperL) == 2) {
five = length5s[[i]]
notFoundFive = FALSE
}
}
two = length5s[[-i]]
# 5 + 7 = 9
nine = union(five,seven)
for (i in 1:3) {
if (sum(length6s[[i]] %in% nine) == 6) {
length6s =length6s[-i]
break
}
}
# !9 + 5  = 6
six = union(setdiff(letters,nine), five)
for (i in 1:2) {
if (sum(length6s[[i]] %in% six) == 6) {
zero =length6s[[-i]]
break
}
}
### Applying the Find number on the output vector
ans = rep(0,4)
for (j in 1:4) {
input_split = unlist(strsplit(output[j], split = ""))
# Solution by length
length = str_length(output[j])
if (length == 2 ) {
ans[j] = 1
}
else if (length == 4) {
ans[j] = 4
}
else if (length == 3) {
ans[j] = 7
}
else if (length == 7) {
ans[j] = 8
}
if (length == 5) {
# Check 2
if (sum(input_split %in% two) == 5) {
ans[j] = 2
}
# Check 3
if (sum(input_split %in% three) == 5) {
ans[j] = 3
}
# Must be 5
if (sum(input_split %in% five) == 5) {
ans[j] = 5
}
}
if (length == 6) {
# Check 0
if (sum(input_split %in% zero) == 6) {
ans[j] = 0
}
# Check 6
if (sum(input_split %in% six) == 6) {
ans[j] =6
}
if (sum(input_split %in% nine) == 6) {
ans[j] =9
}
}
}
results <-  ans %>%
paste(collapse = '') %>%
as.double()
return(results)
}
results = rep(0,100)
for (i in 1:200) {
inputi <- unlist(c(signal[i,]))
outputi <- unlist(c(output[i,]))
results[i] = deCodeNumbers(inputi,outputi)
}
sum(results)
